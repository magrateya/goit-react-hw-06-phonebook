{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/Section/Section.module.css","components/Section/Section.js","redux/actions.js","redux/selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/reducer.js","redux/store.js","index.js"],"names":["module","exports","Section","children","className","s","section","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","getItems","state","contacts","items","getFilter","filter","getVisibleContacts","normalizedFilter","toLowerCase","contact","includes","ContactForm","useSelector","dispatch","useDispatch","useForm","register","handleSubmit","errors","reset","onSubmit","data","e","find","alert","actions","nameLabel","ref","required","maxLength","minLength","type","style","color","formBtn","ContactItem","onDeleteContact","contactItem","onClick","ContactList","contactList","map","contId","Filter","value","filterLabel","filterTitle","onChange","target","App","createReducer","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistedReducer","persistReducer","contactReducer","store","configureStore","reducer","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.dd55aa31.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__2CR80\",\"contactItem\":\"ContactList_contactItem__30KZ9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nameLabel\":\"ContactForm_nameLabel__3ftol\",\"formBtn\":\"ContactForm_formBtn__k0N3x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"Filter_filterLabel__38yVI\",\"filterTitle\":\"Filter_filterTitle__1Gbc5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__sLZeg\"};","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nexport default function Section({ children }) {\n  return <div className={s.section}>{children}</div>;\n}\n\nSection.propTypes = {\n  children: PropTypes.node,\n};\n","// import types from './types';\nimport { createAction } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst addContact = createAction('contact/add', (name, number) => ({\n  payload: { name, number, id: uuidv4() },\n}));\n\nconst deleteContact = createAction('contact/delete');\n\nconst changeFilter = createAction('contact/changeFilter');\n\n// step_1\n// const addContact = (name, number) => ({\n//   type: types.ADD,\n//   payload: { name, number, id: uuidv4() },\n// });\n\n// const deleteContact = contId => ({\n//   type: types.DELETE,\n//   payload: contId,\n// });\n\n// const changeFilter = value => ({\n//   type: types.CHANGE_FILTER,\n//   payload: value,\n// });\n\nexport default { addContact, deleteContact, changeFilter };\n","export const getItems = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = state.contacts.items;\n  const filter = state.contacts.filter;\n\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n};\n","// import { connect } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport s from './ContactForm.module.css';\nimport actions from '../../redux/actions';\nimport { getItems } from '../../redux/selectors';\n\nexport default function ContactForm() {\n  const contacts = useSelector(getItems);\n  const dispatch = useDispatch();\n\n  const { register, handleSubmit, errors, reset } = useForm();\n\n  const onHandleSubmit = (data, e) => {\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === data.name.toLowerCase(),\n      )\n    ) {\n      alert(`${data.name} is already in contacts`);\n      return;\n    }\n    dispatch(actions.addContact(data.name, data.number));\n    // onSubmit(data.name, data.number);\n    reset({ name: '', number: '' });\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onHandleSubmit)}>\n      <label className={s.nameLabel}>\n        Name\n        <input\n          ref={register({ required: true, maxLength: 20, minLength: 2 })}\n          type=\"text\"\n          name=\"name\"\n        />\n        {errors.name?.type === 'required' && (\n          <span style={{ color: 'red' }}>'Your input is required'</span>\n        )}\n        {errors.name?.type === 'maxLength' && (\n          <span style={{ color: 'red' }}>'Your input is too long'</span>\n        )}\n        {errors.name?.type === 'minLength' && (\n          <span style={{ color: 'red' }}>'Your input is too short'</span>\n        )}\n      </label>\n      <label className={s.nameLabel}>\n        Number\n        <input\n          ref={register({ required: true, maxLength: 20, minLength: 7 })}\n          type=\"text\"\n          name=\"number\"\n        />\n        {errors.number?.type === 'required' && (\n          <span style={{ color: 'red' }}>'Your input is required'</span>\n        )}\n        {errors.number?.type === 'maxLength' && (\n          <span style={{ color: 'red' }}>'Your input is too long'</span>\n        )}\n        {errors.number?.type === 'minLength' && (\n          <span style={{ color: 'red' }}>'Your input is too short'</span>\n        )}\n      </label>\n      <button className={s.formBtn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// step_1\n// const mapStatetoProps = ({ contacts: { items, filter } }) => ({\n//   contacts: items,\n// });\n// const mapDispatchToProps = dispatch => ({\n//   onSubmit: (name, number) => dispatch(actions.addContact(name, number)),\n// });\n// export default connect(mapStatetoProps, mapDispatchToProps)(ContactForm);\n","import PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nexport default function ContactItem({ id, name, number, onDeleteContact }) {\n  return (\n    <li className={s.contactItem}>\n      <span>{name}</span>\n      <span>{number}</span>\n      <button type=\"submit\" onClick={() => onDeleteContact(id)}>\n        Delete\n      </button>\n    </li>\n  );\n}\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onDeleteContact: PropTypes.func,\n};\n","// import { connect } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ContactItem from './ContactItem';\nimport s from './ContactList.module.css';\nimport actions from '../../redux/actions';\nimport { getVisibleContacts } from '../../redux/selectors';\n\nexport default function ContactList() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <ul className={s.contactList}>\n        {contacts.map(contact => (\n          <ContactItem\n            key={contact.id}\n            id={contact.id}\n            name={contact.name}\n            number={contact.number}\n            onDeleteContact={contId => dispatch(actions.deleteContact(contId))}\n          />\n        ))}\n      </ul>\n    </>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ),\n  onDeleteContact: PropTypes.func,\n};\n\n// step_1\n// const getVisibleContacts = (contacts, filter) => {\n//   const normalizedFilter = filter.toLowerCase();\n\n//   return contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n\n// const mapStatetoProps = ({ contacts: { items, filter } }) => ({\n//   contacts: getVisibleContacts(items, filter),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onDeleteContact: contId => dispatch(actions.deleteContact(contId)),\n// });\n\n// export default connect(mapStatetoProps, mapDispatchToProps)(ContactList);\n","import { useSelector, useDispatch } from 'react-redux';\n// import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nimport actions from '../../redux/actions';\nimport { getFilter } from '../../redux/selectors';\n\nexport default function Filter() {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className={s.filterLabel}>\n      <span className={s.filterTitle}>Find contacts by name</span>\n      <input\n        type=\"text\"\n        value={value}\n        onChange={e => dispatch(actions.changeFilter(e.target.value))}\n      ></input>\n    </label>\n  );\n}\n\n// step_1\n// Filter.propTypes = {\n//   value: PropTypes.string,\n//   onChange: PropTypes.func,\n// };\n\n// const mapStatetoProps = state => ({\n//   value: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: e => dispatch(actions.changeFilter(e.target.value)),\n// });\n\n// export default connect(mapStatetoProps, mapDispatchToProps)(Filter);\n","import Section from './components/Section/Section';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nexport default function App() {\n  return (\n    <Section>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </Section>\n  );\n}\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n// import types from './types';\nimport actions from './actions';\n\nconst items = createReducer([], {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\n// step_1\n// const items = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case types.ADD:\n//       return [...state, payload];\n//     case types.DELETE:\n//       return state.filter(contact => contact.id !== payload);\n//     default:\n//       return state;\n//   }\n// };\n// const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case types.CHANGE_FILTER:\n//       return payload;\n//     default:\n//       return state;\n//   }\n// };\n\nexport default combineReducers({ items, filter });\n","// import { createStore, combineReducers } from 'redux';\n// import { combineReducers } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport contactReducer from './reducer';\nimport storage from 'redux-persist/lib/storage';\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst persistedReducer = persistReducer(contactsPersistConfig, contactReducer);\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistedReducer,\n  },\n  middleware,\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n\n// step_1\n// import { createStore, combineReducers } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n// import contactReducer from './reducer';\n\n// const rootReducer = combineReducers({\n//   contacts: contactReducer,\n// });\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\n// export default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}